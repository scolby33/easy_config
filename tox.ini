# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
# add additional Python versions below
envlist =
    # always keep coverage-clean first
    coverage-clean
    # code linters/stylers
    flake8
    manifest
    mypy
    pyroma
    radon
    vulture
    xenon
    # docmentation linters/checkers
    rst-lint
    doc8
    docs
    # the actual tests
    py37
    # always keep coverage-report last
    coverage-report

[testenv]
deps =
    coverage
    pytest
extras =
    contrib_click
commands = coverage run --parallel -m pytest tests {posargs}
description = Run pytest tests with coverage.

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase
description = Erase previously-collected coverage data.

[testenv:flake8]
deps =
    flake8
    flake8-colors
    flake8-docstrings
    flake8-import-order
    pep8-naming
skip_install = true
commands = flake8 src/easy_config tests/ setup.py
description = Run the flake8 tool with several plugins (docstrings, import order, pep8 naming).

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest
description = Run the check-manifest tool to make sure the contents of the sdist and VCS match.

[testenv:mypy]
deps = mypy
skip_install = true
commands = mypy src/easy_config
description = Run the mypy tool to check static typing on the project.

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=10 .
description = Run the pyroma tool to check the project's package friendliness.

[testenv:radon]
deps = radon!=3.0.0
skip_install = true
commands = radon mi .
description = Run the radon tool to calculate the maintainability indices of the project sources.

[testenv:vulture]
deps = vulture
skip_install = true
commands = vulture src/easy_config tests vulture_whitelist.py
description = Run the vulture tool to look for dead code.

[testenv:xenon]
deps = xenon
skip_install = true
ignore_errors = true
commands =
    xenon --max-average A --max-modules A --max-absolute B setup.py
    xenon --max-average A --max-modules A --max-absolute B src/easy_config
    xenon --max-average A --max-modules A --max-absolute B --no-assert tests/
description = Run the xenon tool to monitor code complexity.

[testenv:rst-lint]
deps =
    restructuredtext_lint
    pygments
skip_install = true
commands = rst-lint CHANGELOG.rst LICENSE.rst README.rst
description = Check the .rst files in the repository root with rst-lint to make sure they can be parsed.

[testenv:doc8]
deps =
    doc8
    pygments
skip_install = true
commands = doc8 docs/source README.rst
description = Run the doc8 tool to check the style of RST files in the project docs and the README.rst file.

[testenv:docs]
changedir = docs
deps =
    sphinx
    sphinx-autodoc-typehints
    sphinx_rtd_theme
whitelist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    sphinx-build -W -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    sphinx-build -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt
description = Attempt to build the Sphinx docs.

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report
description = Combine coverage data from all test runs and report on the results.
